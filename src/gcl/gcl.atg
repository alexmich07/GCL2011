$FPSX
COMPILER gcl

		static final boolean DIRECT = CodegenConstants.DIRECT;
		static final boolean INDIRECT = CodegenConstants.INDIRECT;
		IntegerType integerType = SemanticActions.INTEGER_TYPE;
		BooleanType booleanType = SemanticActions.BOOLEAN_TYPE;
		TypeDescriptor noType = SemanticActions.NO_TYPE;

/*==========================================================*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  eol = '\r'.
  nl = '\n'.
  tab = '\t'.
  underscore = "_".

TOKENS
  identifier  = letter {letter | digit | underscore }.
  numeral = digit {digit}.

PRAGMAS
	option1 = "$"("c"|"C")("+"|"-").
		(. CompilerOptions.listCode = la.val.charAt(2) == '+'; .)
	option3 = "$"("o"|"O")("+"|"-").
		(. CompilerOptions.optimize = la.val.charAt(2) == '+'; .)
	option5 = "$"("s"|"S")"+". (. SymbolTable.dumpAll(); .)
	option6 = "$"("s"|"S")"-".  /* ignore */
	option7 = "$"("m"|"M")("+"|"-").
		(. CompilerOptions.showMessages = la.val.charAt(2) == '+'; .)
	option9 = "$"("r"|"R")"+". (. CompilerOptions.printAllocatedRegisters(); .)
	option10 = "$"("r"|"R")"-".  /* ignore */

COMMENTS FROM "{" TO "}" NESTED
COMMENTS FROM "--" TO eol

IGNORE eol + tab + nl

/*==========================================================*/
PRODUCTIONS

gcl
=
	(. semantic.startCode();  SymbolTable scope = SymbolTable.currentScope(); .)
	SYNC module<scope>
	{ (. scope = scope.openScope(true); .) SYNC module<scope> }
	(. semantic.finishCode(); .) .
/*----------------------------------------------------------*/
module<SymbolTable scope>
=
	"module" identifier
		definitionPart<scope>
	[ "private" (. SymbolTable privateScope = scope.openScope(false); .)
		block<privateScope> ] "." .
/*----------------------------------------------------------*/
block<SymbolTable scope>
=
     definitionPart<scope> SYNC "begin"  statementPart<scope> "end".
/*----------------------------------------------------------*/
definitionPart<SymbolTable scope>   =    {SYNC definition<scope> WEAK ";" }.
/*----------------------------------------------------------*/
statementPart<SymbolTable scope>
=
	SYNC statement<scope> WEAK ";" { SYNC statement<scope> WEAK ";"}.
/*----------------------------------------------------------*/
definition<SymbolTable scope>
=
	variableDefinition<scope, ParameterKind.NOT_PARAM> .
	//| constantDefinition<scope, ParameterKind.NOT_PARAM> .
	//| typeDefinition<scope, ParameterKind.NOT_PARAM> . // TO BE ADDED
/*----------------------------------------------------------*/
variableDefinition<SymbolTable scope, ParameterKind kindOfParam>
	(. TypeDescriptor type; Identifier id; .)
=
	type<^type> identifier
		(. 	id = new Identifier(currentToken().spelling());
			semantic.declareVariable(scope, type, id, kindOfParam);
		.)
	{	"," identifier
		(. 	id = new Identifier(currentToken().spelling());
			semantic.declareVariable(scope, type, id, kindOfParam);
		.)
	}.
/*----------------------------------------------------------*/
/*constantDefinition<SymbolTable scope, ParameterKind kindOfParam>
	(. Identifier id; ConstantExpression expr; .)
=
	"constant" identifier (. id = new Identifier(currentToken().spelling()); .)
	"="
	constant<^expr, scope> (. semantic.declareConstant(expr, scope, id, kindOfParam); .).
/*----------------------------------------------------------*/
constant<^ConstantExpression expr, SymbolTable scope>
=
	expression<^expr, scope> (. expr = semantic.expectConstant(expr); .).*/
/*----------------------------------------------------------*/
type<^TypeDescriptor result>	(. result = noType; .)
=
	typeSymbol<^result>   |  tupleType<^result>.
/*----------------------------------------------------------*/
typeSymbol<^TypeDescriptor result> (. result = noType; .) // ADD: scope (. result = noType; .)
=
	"integer" (. result = integerType; .) | "Boolean" (. result = booleanType; .) .
/*----------------------------------------------------------*/
tupleType<^TupleType result>   (. TypeDescriptor type; Identifier id; .)
=
	(. TypeList carrier = new TypeList(); .)
	"tuple" "[" typeSymbol<^type> identifier // ADD scope
		(.id = new Identifier(currentToken().spelling()); carrier.enter(type, id);.)
		{  "," typeSymbol<^type> identifier // ADD scope
		(.id = new Identifier(currentToken().spelling()); carrier.enter(type, id);.)
		}
	"]"
     (. result = new TupleType(carrier); .) .
/*----------------------------------------------------------*/
statement<SymbolTable scope>
=
	emptyStatement | readStatement<scope>  | writeStatement<scope>
	| assignStatement<scope> | ifStatement<scope> | doStatement<scope> .
/*----------------------------------------------------------*/
emptyStatement     = "skip".
/*----------------------------------------------------------*/
readStatement<SymbolTable scope>      (. Expression exp; .)
=
	"read" variableAccessEtc<^exp, scope>  (. semantic.readVariable(exp); .)
		{ ","  variableAccessEtc<^exp, scope>  (. semantic.readVariable(exp); .) } .
/*----------------------------------------------------------*/
writeStatement<SymbolTable scope>      (. Expression exp; .)
=
	"write" expression<^exp, scope>  (. semantic.writeExpression(exp); .)
		{  "," expression<^exp, scope>  (. semantic.writeExpression(exp); .) }
		(. semantic.genEol(); .).
/*----------------------------------------------------------*/
assignStatement<SymbolTable scope>
		(. AssignRecord expressions = new AssignRecord(); Expression exp; .)
=
	variableAccessEtc<^exp, scope> (. expressions.left(exp); .)
		{ "," variableAccessEtc<^exp, scope> (. expressions.left(exp); .) }
		":="
		expression<^exp, scope> (. expressions.right(exp); .)
		{ "," expression<^exp, scope> (. expressions.right(exp); .) }
		(. semantic.parallelAssign(expressions); .).
/*----------------------------------------------------------*/
ifStatement<SymbolTable scope>  (. GCRecord ifRecord; .)
=
	"if" (. ifRecord = semantic.startIf(); .)  guardedCommandList<scope, ifRecord >
	"fi" (. semantic.endIf(ifRecord); .).
/*----------------------------------------------------------*/
guardedCommandList<SymbolTable scope, GCRecord ifRecord>
=
	guardedCommand<scope, ifRecord> { "[]" guardedCommand<scope, ifRecord> }.
/*----------------------------------------------------------*/
guardedCommand<SymbolTable scope, GCRecord  ifRecord >  (.  Expression expr; .)
=
	expression<^expr, scope> (. semantic.ifTest(expr, ifRecord); .)  "->"
	statementPart<scope>  (. semantic.elseIf(ifRecord); .).
/*----------------------------------------------------------*/
doStatement<SymbolTable scope>  (. GCRecord doRecord; .)
=
	"do" (. doRecord = semantic.startDo(); .)  guardedCommandList<scope, doRecord >
	"od" (. semantic.endDo(doRecord); .) .
/*----------------------------------------------------------*/
expression<^Expression left, SymbolTable scope>
=
	relationalExpr<^left, scope> .
/*----------------------------------------------------------*/
relationalExpr<^Expression left, SymbolTable scope>
	(. Expression right; RelationalOperator op; .)
=
	simpleExpr<^left, scope>
		[ relationalOperator<^op>   simpleExpr<^right, scope>
		(. left = semantic.compareExpression(left, op, right); .)
		].
/*----------------------------------------------------------*/
simpleExpr<^Expression left, SymbolTable scope>
	(. Expression right; AddOperator op; left = null; .)
=
	(	["+"]term<^ left, scope>
		|  "-" term<^ left, scope>
					(. left = semantic.negateExpression(left); .)
	)
	{  	addOperator<^op>  term<^right, scope>
			(. left = semantic.addExpression(left, op, right); .)
	}.
/*----------------------------------------------------------*/
term<^Expression left, SymbolTable scope>
	(. Expression right; MultiplyOperator op; .)
=
	factor<^ left, scope> { multiplyOperator<^op>  factor<^right, scope>
	(. left = semantic.multiplyExpression(left, op, right); .) }.
/*----------------------------------------------------------*/
factor<^Expression result, SymbolTable scope>  (. result = null; .)
=
	   variableAccessEtc<^result, scope>
	|  numeral
	  (. result = new ConstantExpression (integerType, Integer.parseInt(currentToken().spelling()));
	  .)
	| booleanConstant<^result, scope>
	| "(" expression<^result, scope> ")"
	| (. Expression exp;
		 ExpressionList tupleFields = new ExpressionList();
	  .)
		"[" expression<^exp, scope>
			(. tupleFields.enter(exp); .)
		 { "," expression<^exp, scope>
		 	(. tupleFields.enter(exp); .)
		 }
		"]"  (. result = semantic.buildTuple(tupleFields); .)
	| "~" factor<^result, scope> (. result = semantic.negateBoolean(result); .) .
/*----------------------------------------------------------*/
relationalOperator<^RelationalOperator op>  (. op = null; .)
=
	"="  (. op = RelationalOperator.EQUAL; .)
	| "#" (. op = RelationalOperator.NOT_EQUAL; .)
	| ">" (. op = RelationalOperator.GREATER; .)
	| ">=" (. op = RelationalOperator.GREATER_OR_EQUAL; .)
	| "<" (. op = RelationalOperator.LESS; .)
	| "<=" (. op = RelationalOperator.LESS_OR_EQUAL; .).
/*----------------------------------------------------------*/
addOperator<^AddOperator op > (. op = null; .)
 =
 	"+"  (. op = AddOperator.PLUS; .)
 	| "-" (. op = AddOperator.MINUS; .).
/*----------------------------------------------------------*/
multiplyOperator<^MultiplyOperator op > 	(. op = null; .)
=
	"*"   (. op = MultiplyOperator.TIMES; .)
	| "/"  (. op = MultiplyOperator.DIVIDE; .)
	| "\\" (. op = MultiplyOperator.MODULO; .) .
/*----------------------------------------------------------*/
booleanOperator<^BooleanOperator op> (. op = null; .)
=
	"&" (. op = BooleanOperator.AND; .)
	| "|" (. op = BooleanOperator.OR; .) .
/*----------------------------------------------------------*/
qualifiedIdentifier<^SemanticItem result, SymbolTable scope>
=
identifier (. Identifier id = new Identifier(currentToken().spelling());
			result = semantic.semanticValue(scope, id); .) .
/*----------------------------------------------------------*/
variableAccessEtc<^Expression result, SymbolTable scope>
      (. SemanticItem workValue; .)
=
qualifiedIdentifier<^workValue, scope> (. result = workValue.expectExpression(err); .) .
/*----------------------------------------------------------*/
booleanConstant<^Expression result, SymbolTable scope> (. result = null; .)
=
	"true" (. result = new ConstantExpression (booleanType, Integer.parseInt("1")); .)
	| "false" (. result = new ConstantExpression (booleanType, Integer.parseInt("0")); .) .
/*----------------------------------------------------------*/
END gcl.